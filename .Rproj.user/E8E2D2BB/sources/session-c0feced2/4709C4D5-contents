#ToothGrowth Dataset: Built into R, so no need to upload!

#Suppose we have an Excel file instead: Excel_Tooth.xlsx
#If you do need to upload: In the top right, hit "Import Dataset", "From Excel" then "Browse"
#Click the dataset you want to upload, then hit "Import".
#Make sure you then transform the dataset into a data frame.
#Dataset <- data.frame(Excel_Tooth)


#Do ?ToothGrowth to see a description in R
#3 Variables: Tooth length (response), supplement type (orange juice or ascorbic acid),
#and dose size.

################### F-Test

#var.test(response ~ groups, data, alternative = "two.sided")

#Do ?var.test to get a description from R on how to use this.

#response is the name of the variable with the values in your dataset
#group is the name of the variable that defines which group the response is from
#Note to replace dataset with the dataset name that you're working with
#alternative specifies which test to run (can be "upper", "lower", or "two.sided")

#Suppose we want to compare the variance of the VC group and the OJ group:
#the response is len and the groups are supp, dataset is ToothGrowth
attach(ToothGrowth)
var.test(len ~ supp, data=ToothGrowth, alternative = "two.sided")

#If you want to do a one-sample test, you have to install the "EnvStats" package.
#In the upper left, go to Tools -> Install Packages -> Then search for EnvStats > Install
#After it is installed, you must call the library to indicate you want to use functions from it.

library(EnvStats)
#Suppose we want to compare the variance of all tooth lengths to 50.0.
varTest(len, sigma.squared=50, data=ToothGrowth, alternative = "two.sided")


#Check assumptions
#Create A histogram
hist(len)

#Hypothesis Test for Normality:
#H0: Variable is normally distributed.
#Ha: Variable is not normally distributed.
#If p-value > .05, normality assumption is satisfied.
shapiro.test(len)


#################### ANOVAs
###### One-Factor

# Suppose we want to see if there is a difference in tooth length among 
#the two different groups: Orange juice and Ascorbic acid.

levels(supp)

#We want to use the aov() function.
#We want to create an object that has all the information from out anova:
#results <- aov(response ~ group, data=dataset)

results <- aov(len ~ supp, data=ToothGrowth)
summary(results)





###### Randomized Block Design
#Suppose we wanted to see if there was a difference in tooth length by supplement,
#but block by the dose size.

#results <- aov(response ~ group + block, data=dataset)

#The dose size is numeric, so use as.factor() to ensure it treats each number 
#as a group, and not an actual number value

results_block <- aov(len ~ supp + as.factor(dose), data=ToothGrowth)
summary(results_block)


###### Multiple Comparisons of Means

#TukeyHSD(results) will automatically compare all means using the Tukey method.

table(supp)
TukeyHSD(results_block)



###### Two-Factor
# We want to use both supp and dose size to explain tooth length.
# results <- aov(response ~ group1 + group2 + group1*group2, data=dataset)

#Here, dose size is numeric and not a factor, so we need to use "as.factor(dose)"
#to make sure R treats it as a category and not as a numeric variable.

results_twofactor <- aov(len ~ supp + as.factor(dose) + supp*as.factor(dose), data=ToothGrowth)
summary(results_twofactor)

#Results of the test to ensure at least 1 treatment affects the mean:
#Use pf() to get the probability that a value from the F distribution is higher.

F_value <- ((205.4+2426.4+108.3)/5)/13.2
pf(F_value, 5, 54, lower.tail = FALSE)

TukeyHSD(results_twofactor)





#If samples are unequal, then use pairwise.t.test(response, factor, p.adjust = "bonf")
pairwise.t.test(len, as.factor(dose), method = "bonf")
