library(readxl)
Wage <- read_excel("Wage.xlsx")
View(Wage)
View(Wage)
View(Wage)
install.packages("dplyr")
install.packages("ggpubr")
library("dplyr")
library("ggpubr")
# imports
library("dplyr")
# imports
library("dplyr")
print(Wage)
Wage <- read_excel("Wage.xlsx")
print(Wage)
# Check assumption: normal distribution
set.seed(1234)
dplyr::sample_n(Wage, 10)
library("ggpubr")
# Check assumption: normal distribution
ggdensity(Wage$wage, main="Density of wages", xlab="Wages")
snpar
library("snpar")
install.packages("snpar")
# Check assumption: normal distribution
# After running the following line, we see that the distribution is bell-shaped.
ggdensity(Wage$heath_ins, main="Density of wages", xlab="Wages")
View(Wage)
# Check assumption: normal distribution
# After running the following line, we see that the distribution is bell-shaped.
ggdensity(Wage$health_ins, main="Density of wages", xlab="Wages")
wage
# Check assumption: normal distribution
# After running the following line, we see that the distribution is bell-shaped.
ggdensity(Wage$wage, main="Density of wages", xlab="Wages")
ggpubr
library("snpar")
library("randests")
install.packages("randests")
library("randests")
# Check assumption: randomness
difference.sign.test(Wage)
# Check assumption: randomness
RunsTest(Wage)
library("snpar")
install.packages("snpar")
library("snpar")
install.packages("snpar")
# Check assumption: randomness
RunsTest(Wage)
# Check assumption: randomness
runs.test(Wage)
if (!exists("runs.test", mode="function")) source("runs-test.r")
# Check assumption: randomness
runs.test(Wage)
# Check assumption: randomness
vector_wage <- c(Wage)
runs.test(vector_wage)
# Step 3: Finding the Test Statistic
wage_variance_with <- var(Wages)
# Step 3: Finding the Test Statistic
wage_variance_with <- var(Wage)
# H_0: Variable is normally distributed
# H_A: Variable is not normally distributed
# if p-val > .05, the assumption is satisfied
shapiro.test(Wage$wage)
# Step 3: Finding the Test Statistic
wage_variance_with_hs <- var(Wage)
View(wage_variance_with)
View(wage_variance_with)
wage_col <- Wage$wage
health_ins_col <- Wage$health_ins
# Shapiro test for normality
# After running the following line, we see that the p-value < 0.05, therefore
# showing proving the population's normality:
shapiro.test(wage_col)
?var.test()
df <- data.frame(Wage)
View(vector_wage)
# Step 3: Finding the Test Statistic
var.test(wage_col ~ health_ins_col, df)
# Step 3: Finding the Test Statistic
var.test(wage_col ~ health_ins_col, data = df)
# Step 3: Finding the Test Statistic
# After running the following line, we can see the p-value is 1.812e-06
var.test(wage ~ health_ins, data = df)
# Shapiro test for normality
# After running the following line, we see that the p-value < 0.05, therefore
# showing proving the population's normality:
shapiro.test(wage)
# Step 3: Finding the Test Statistic
# After running the following line, we can see the p-value is 1.812e-06
var.test(wage_col ~ health_ins_col, data = df)
# Step 3: Finding the Test Statistic
# After running the following line, we can see the p-value is 1.812e-06
var.test(wage_col ~ health_ins_col, data = df, alternative = "two-sided")
# Step 3: Finding the Test Statistic
# After running the following line, we can see the p-value is 1.812e-06
var.test(wage_col ~ health_ins_col, data = df, alternative = "two.sided")
# Perform Levene's test
test_result <- var.test(wage ~ health_ins, data=data)
# Perform Levene's test
test_result <- var.test(wage ~ health_ins, data=df)
# Get the test statistic and degrees of freedom
test_statistic <- test_result$statistic
df_num <- test_result$parameter[1]  # numerator degrees of freedom
df_denom <- test_result$parameter[2]  # denominator degrees of freedom
# Calculate the critical values from the F-distribution
alpha <- 0.05  # chosen significance level
critical_value_lower <- qf(alpha/2, df_num, df_denom)  # lower critical value
critical_value_upper <- qf(1 - alpha/2, df_num, df_denom)  # upper critical value
# Print the critical values
cat("Lower Critical Value:", critical_value_lower, "\n")
cat("Upper Critical Value:", critical_value_upper, "\n")
# Compare the test statistic to critical values
if (test_statistic < critical_value_lower | test_statistic > critical_value_upper) {
cat("Reject the null hypothesis\n")
} else {
cat("Fail to reject the null hypothesis\n")
}
# Auxiliary variables:
Wage <- read_excel("Wage.xlsx")
# Auxiliary variables:
Wage <- read_excel("Wage.xlsx")
library(readxl)
Wage <- read_excel("Wage.xlsx")
View(Wage)
# Auxiliary variables:
Wage <- read_excel("Wage.xlsx")
df <- data.frame(Wage)
wage_col <- Wage$wage
health_ins_col <- Wage$health_ins
# Shapiro test for normality
# After running the following line, we see that the p-value < 0.05, therefore
# showing proving the population's normality:
shapiro.test(wage_col)
# Step 3/4: Finding the Test Statistic
# After running the following line, we can see the p-value is 1.812e-06
var.test(wage_col ~ health_ins_col, data = df)
ts_oneway <- aov(wage ~ education, data = df)
summary(ts_oneway)
View(ts_oneway)
